.orig x3000
JSR GETDEC
JSR GETDEC
HALT



GETNUM	ST R7, M1_R7
ST R3, M1_R3
E GETC
ADD R3, R0, #0
ADD R3, R3, #-10
BRZ N
LD R7, ASCIIDOWN
ADD R0, R0, R7
ST R0, M1_R0
ADD R0, R0, #-9
BRP E
LD R0, M1_R0
ADD R0, R0, #1
BRNZ E
ADD R0, R0, #-1
LD R7, ASCIIUP
ADD R0, R0, R7
OUT
LD R7, ASCIIDOWN
ADD R0, R0, R7
N LD R3, M1_R3
LD R7, M1_R7
RET
M1_R3 .fill 0
M1_R7 .fill 0
M1_R0 .fill 0
ASCIIUP .fill 48
ASCIIDOWN .fill -48

MULT 
ST R7, M2_R7
ST R2, M2_R2
ST R1, M2_R1
ADD R1, R1, #0
BRZ BOTTOM
ADD R2, R2, #0
BRZ BOTTOM
AND R0, R0, #0
NOT R7, R2
ADD R7, R7, #1
ADD R7, R1, R7
BRN YAH
VALID ADD R0, R0, R1
ADD R2, R2, #-1
BRP VALID
BRNZP SWANSON
YAH ADD R0, R0, R2
ADD R1, R1, #-1
BRP YAH
BRNZP SWANSON
BOTTOM AND R0, R0, #0
SWANSON LD R1, M2_R1
LD R2, M2_R2
LD R7, M2_R7
RET
M2_R7 .fill 0
M2_R2 .fill 0
M2_R1 .fill 0

GETDEC 
ST R7, M3_R7
ST R6, M3_R6
ST R5, M3_R5
ST R4, M3_R4
ST R3, M3_R3
ST R2, M3_R2
ST R1, M3_R1
AND R0, R0, #0
AND R3, R3, #0
AND R4, R4, #0
AND R5, R5, #0
AND R6, R6, #0
LEA R0, stringInput
PUTS
TOP JSR GETNUM
ADD R3, R0, #0
ADD R3, R3, #-10
BRZ TOP
ST R0, PLACEHOLD
CYCLE JSR GETNUM
LD R2, NUM_10
ADD R3, R0, #0
ADD R3, R3, #-10
BRZ MOHEBBI
ADD R6, R0, #0
LD R1, PLACEHOLD
JSR MULT
ADD R0, R6, R0
ST R0, PLACEHOLD
AND R0, R0, #0
BRNZP CYCLE
MOHEBBI LEA R0, endl
PUTS
LD R0, PLACEHOLD
AND R1, R1, #0
ST R1, PLACEHOLD
LD R6, M3_R6
LD R5, M3_R5
LD R4, M3_R4
LD R3, M3_R3
LD R2, M3_R2
LD R1, M3_R1
LD R7, M3_R7
RET
PLACEHOLD .fill 0
NUM_10 .fill 10
M3_R7 .fill 0
M3_R6 .fill 0
M3_R5 .fill 0
M3_R4 .fill 0
M3_R3 .fill 0
M3_R2 .fill 0
M3_R1 .fill 0
stringInput .stringz "Enter an integer: "
endl .stringz "\n"
.end
